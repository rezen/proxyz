#!/usr/bin/env php
<?php

$root = realpath(dirname(__FILE__) . "/../");
require $root . '/vendor/autoload.php';

use Symfony\Component\DomCrawler\Crawler;

function httpGet($url) {
    $context = stream_context_create([
        "http" => [
            "method" => "GET",
            "header" => implode("\r\n", [
                "accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
                "accept-language: en-US,en;q=0.9",
                "cache-control: max-age=0",
                "sec-fetch-mode: navigate",
                "sec-fetch-site: none",
                "sec-fetch-user: ?1",
                "upgrade-insecure-requests: 1",
                "user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36",
            ]),
            'follow_location' => true
        ]
    ]);
    return file_get_contents($url, false, $context);
}



function getFunctions() {
    $reference = "https://codex.wordpress.org/Function_Reference";
    $html = httpGet($reference);
    if (!$html) {
        throw new Exception("Could not reach WordPress reference");
    }
    $namespaceMap = [
        'Post, Custom Post Type, Page, Attachment and Bookmarks Functions' => 'post',
        'Category, Tag and Taxonomy Functions' => 'taxonomy',
        'User and Author Functions' => 'user',
        'Feed Functions' => 'feed',
        'HTTP API Functions' => 'http',
        'Comment, Ping, and Trackback Functions' => 'comment',
        'Action, Filter, and Plugin Functions' => 'plugin',
        'Theme-Related Functions' => 'theme',
        'Formatting Functions' => 'formatting',
        'Miscellaneous Functions' => 'misc',
        'Multisite functions' => "multisite",
    ];
    $crawler = new Crawler($html);
    $elements = $crawler->filter('.widefat');

    $headings = $elements->filter('tr h3')->each(function($el) use($namespaceMap) {
        return  $namespaceMap[$el->text()];
    });

    $sections = $elements->each(function($el)  {
        return $el->filter('tr')->eq(1)->filter('li tt a');
    });

    $idx = 0;
    return array_reduce($sections, function($aggr, $section) use (&$idx, $headings) {
        $methods = $section->each(function($el) {
            return preg_replace("/[^A-z0-9_]+/", "", $el->text());
        });
        $methods = array_values(array_unique($methods));
        sort($methods);
        $id =  $headings[$idx];
        $aggr[$id] = array_map(function($m) {
            return ['name' => $m];
        }, $methods);
        $idx += 1;
        return $aggr;
    }, []);
}

$functions = getFunctions();
$encoded = json_encode($functions, JSON_PRETTY_PRINT);
file_put_contents("$root/bin/data/wp.json", $encoded);

